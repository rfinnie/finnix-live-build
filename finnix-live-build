#!/bin/sh

set -e

PRODUCT="${PRODUCT:-Finnix}"
PRODUCT_ID="${PRODUCT_ID:-finnix}"
VERSION="${VERSION:-dev}"
CODENAME="${CODENAME:-ashwaubenon}"
ARCH="${ARCH:-$(dpkg --print-architecture)}"
SOURCE_ISO="${SOURCE_ISO:-false}"

lock() {
    _file=$1
    exec 9>"${_file}"
    if ! flock -x -w 1 9; then
        echo "${_file} lock failed" >&2
        exit 1
    fi
}

render() {
    env \
        "PRODUCT=${PRODUCT}" \
        "PRODUCT_ID=${PRODUCT_ID}" \
        "VERSION=${VERSION}" \
        "CODENAME=${CODENAME}" \
        "ARCH=${ARCH}" \
        "DATETIME=${DATETIME}" \
        "DATE=${DATE}" \
        "YEAR=${YEAR}" \
        "GIT_DESC=${GIT_DESC}" \
   "${BASE_DIR}/tools/jinja2-render"
}

DATETIME="$(date -u +"%F %T")"
DATE="$(date -u +"%F")"
YEAR="$(date -u +"%Y")"
SQUASHFS_COMP="xz"
if [ "${ARCH}" = "amd64" ]; then
    BINARY_IMAGES="iso-hybrid"
    BOOTLOADERS="grub-efi,syslinux"
    ISO_FILENAME="${PRODUCT_ID}-${ARCH}.hybrid.iso"
    MEMTEST="memtest86+"
    SQUASHFS_COMP="xz -Xbcj x86"
elif [ "${ARCH}" = "i386" ]; then
    BINARY_IMAGES="iso-hybrid"
    BOOTLOADERS="grub-efi,syslinux"
    ISO_FILENAME="${PRODUCT_ID}-${ARCH}.hybrid.iso"
    MEMTEST="memtest86+"
    SQUASHFS_COMP="xz -Xbcj x86"
elif [ "${ARCH}" = "arm64" ]; then
    BINARY_IMAGES="iso-hybrid"
    BOOTLOADERS="grub-efi"
    ISO_FILENAME="${PRODUCT_ID}-${ARCH}.hybrid.iso"
    MEMTEST=""
else
    BINARY_IMAGES="iso"
    BOOTLOADERS=""
    ISO_FILENAME="${PRODUCT_ID}-${ARCH}.iso"
    MEMTEST=""
fi

if [ "$(dnsdomainname)" = "snowman.lan" ]; then
    APT_HTTP_PROXY="http://deb-proxy.snowman.lan:8000"
fi

BASE_DIR="${BASE_DIR:-$(dirname "$(readlink -f "$0")")}"
DATA_DIR="${DATA_DIR:-${BASE_DIR}/build}"
CACHE_DIR="${CACHE_DIR:-${DATA_DIR}/cache}"
LOCK_DIR="${LOCK_DIR:-${DATA_DIR}/lock}"
LOCK_NAME="${LOCK_NAME:-$(basename "$(readlink -f "$0")")}"
LB_DIR="${LB_DIR:-${DATA_DIR}/lb}"
LB_CACHE_DIR="${LB_CACHE_DIR:-${CACHE_DIR}/lb}"
LIVE_BUILD="${LIVE_BUILD:-${BASE_DIR}/live-build}"

if [ "${LIVE_BUILD}" = "-" ]; then
    export LIVE_BUILD=""
else
    export LIVE_BUILD
    export PATH="${LIVE_BUILD}/frontend:${PATH}"
fi

GIT_DESC="$(git -C "${BASE_DIR}" describe --always --dirty 2>/dev/null || true)"

mkdir -p "${LOCK_DIR}"
lock "${LOCK_DIR}/${LOCK_NAME}.lock"

if command -v shellcheck >/dev/null; then
    shellcheck "${BASE_DIR}/finnix-live-build"
fi

cd /
rm -rf "${LB_DIR}"
mkdir -p "${LB_DIR}"
cd "${LB_DIR}"

# Note that --source true also requires --apt-source-archives true

lb config noauto \
  --apt-http-proxy "${APT_HTTP_PROXY}" \
  --apt-indices false \
  --apt-recommends false \
  --apt-source-archives true \
  --architectures "${ARCH}" \
  --archive-areas "main contrib non-free" \
  --backports false \
  --binary-images "${BINARY_IMAGES}" \
  --bootappend-live "boot=live quiet" \
  --bootloaders "${BOOTLOADERS}" \
  --cache-indices true \
  --chroot-squashfs-compression-type "${SQUASHFS_COMP}" \
  --distribution testing \
  --hdd-label "$(echo "${PRODUCT_ID}" | tr '[:lower:]' '[:upper:]')" \
  --image-name "${PRODUCT_ID}" \
  --iso-application "${PRODUCT}" \
  --iso-preparer "${PRODUCT}" \
  --iso-publisher "${PRODUCT}" \
  --iso-volume "${PRODUCT} ${VERSION}" \
  --memtest "${MEMTEST}" \
  --security false \
  --source "${SOURCE_ISO}" \
  --source-images iso \
  --updates false \
  --zsync false \
  --mode debian

mkdir -p "${LB_CACHE_DIR}"
if [ -e "${LB_CACHE_DIR}/bootstrap/etc/hostname" ]; then
    if [ -n "$(find "${LB_CACHE_DIR}/bootstrap/etc/hostname" -mmin +1080)" ]; then
        rm -rf "${LB_CACHE_DIR}/bootstrap"
    fi
else
    rm -rf "${LB_CACHE_DIR}/bootstrap"
fi
if [ -e "${LB_CACHE_DIR}/indices.bootstrap/pkgcache.bin" ]; then
    if [ -n "$(find "${LB_CACHE_DIR}/indices.bootstrap/pkgcache.bin" -mmin +1080)" ]; then
        rm -rf "${LB_CACHE_DIR}/indices.bootstrap" "${LB_CACHE_DIR}/contents.chroot"
    fi
else
    rm -rf "${LB_CACHE_DIR}/indices.bootstrap" "${LB_CACHE_DIR}/contents.chroot"
fi
find "${LB_CACHE_DIR}"/packages.* -name '*.deb' -mtime +30 -delete 2>/dev/null || true
rm -rf "${LB_DIR}/cache"
ln -sf "${LB_CACHE_DIR}" "${LB_DIR}/cache"

for i in "${BASE_DIR}/hooks"/*.hook.chroot.in; do
    basefn="$(basename "$i" .in)"
    rm -f "${LB_DIR}/config/hooks/normal/${basefn}"
    # False positive in earlier shellcheck
    # shellcheck disable=SC2094
    render <"${i}" >"${LB_DIR}/config/hooks/normal/${basefn}"
done

mkdir -p "${LB_DIR}/config/bootloaders/syslinux_common"
render <"${BASE_DIR}/syslinux/splash.svg" | rsvg-convert --format png --width 640 --height 480 >"${LB_DIR}/config/bootloaders/syslinux_common/splash.png"
mkdir -p "${LB_DIR}/config/bootloaders/grub-pc"
cp "${BASE_DIR}/grub"/*.cfg "${LB_DIR}/config/bootloaders/grub-pc/"
render <"${BASE_DIR}/grub/splash.svg" | rsvg-convert --format png --width 1920 --height 1080 >"${LB_DIR}/config/bootloaders/grub-pc/splash.png"
mkdir -p "${LB_DIR}/config/bootloaders/grub-pc/live-theme"
cp "${BASE_DIR}/grub/theme.txt" "${LB_DIR}/config/bootloaders/grub-pc/live-theme/"

cp "${BASE_DIR}/lists"/*.list.chroot "${LB_DIR}/config/package-lists/"

if [ -e "${BASE_DIR}/squashfs.sort" ]; then
    mkdir -p "${LB_DIR}/config/rootfs"
    cp "${BASE_DIR}/squashfs.sort" "${LB_DIR}/config/rootfs/squashfs.sort"
fi

# The in-squashfs initrds are unused; exclude them
mkdir -p "${LB_DIR}/config/rootfs"
cat <<"EOM" >"${LB_DIR}/config/rootfs/excludes"
boot/initrd.img*
initrd.img*
EOM

mkdir -p "${LB_DIR}/config/includes.chroot/etc"
echo "${PRODUCT_ID}" >"${LB_DIR}/config/includes.chroot/etc/hostname"
cat <<EOM >"${LB_DIR}/config/includes.chroot/etc/hosts"
127.0.0.1	localhost
127.0.1.1	${PRODUCT_ID}

::1	ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff00::1	ip6-allnodes
ff00::2	ip6-allrouters
EOM

if command -v shellcheck >/dev/null; then
    grep -l '^#!/bin/sh' "${LB_DIR}/config/hooks/normal"/*-finnix-*.hook.chroot | xargs shellcheck
fi

lb build

ls -lsa "${LB_DIR}/${ISO_FILENAME}"
file "${LB_DIR}/${ISO_FILENAME}"
